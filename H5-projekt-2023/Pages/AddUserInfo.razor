@inject H5_projekt_2023.Repo.UserRepo _context;
@inject H5_projekt_2023.codes.EncryptionTest _encryption;
@inject AuthenticationStateProvider GetAuthenticationStateAsync;
@inject NavigationManager _navigationManager;

@page "/AddUserInfo"
@using H5_projekt_2023.models;
@attribute [Authorize(Policy = "RequireAuthUser")]




<h3>Add your user information</h3>
<div class="row">
    <div class="col-md-4">
        <form>
        <div class="form-group">
            <label>First Name</label>
                <input type="text" name="FirstName" @bind="FirstName" class="form-control" />
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <input type="text" name="LastName" @bind="LastName" class="form-control" />
        </div>
        <div class="form-group">
            <label>City</label>
            <input type="text" name="City" @bind="City" class="form-control" />
        </div>
        <div class="form-group">
            <label>Postal Code</label>
            <input type="number" name="Postal" @bind="Postal" class="form-control" />
        </div>
        <div class="form-group">
            <label>Age</label>
            <input type="number" name="Age" @bind="Age" class="form-control" />
        </div>
        <div>
            <br />
            <button @onclick="HandleValidSubmit" type="submit" class="btn btn-primary">Save</button>
            <button type="reset" class="btn btn-danger">Clear All</button>
        </div>
        <p>@Error</p>
        </form>
    </div>
</div>

@code {
    public string Error { get; set; }
    public string UserEmail { get; set; }
    public string FirstName{ get; set; }
    public string LastName{ get; set; }
    public string City{ get; set; }
    public int Postal{ get; set; }
    public int Age{ get; set; }


    private UserInfo userInfo = new UserInfo();

    protected async override void OnInitialized()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        if(user != null)
        {
            UserEmail = user.Identity.Name;
        }
    }

    private async void HandleValidSubmit()
    {
        if(userInfo.UserEmail == UserEmail)
        {
            Error = "User info already exists...";
        }
        else
        {
        try
        {
            userInfo.UserEmail = UserEmail;
            userInfo.FirstName = FirstName;
            userInfo.LastName = LastName;
            userInfo.City = City;
            userInfo.Postal = Postal;
            userInfo.Age = Age;
            await _context.CreateItem(userInfo);
            _navigationManager.NavigateTo("/", true);

        }
        catch (Exception ex)
        {
            string message = ex.Message;
        }
        }
    }
}
