@page "/Admin"
@using RolesPolicy.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@inject IJSRuntime JsRunetime
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> _signInManager


<h3>AdminPage</h3>

<EditForm Model="newUser" OnValidSubmit="@AddUserWithRole">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group row">
        <label for="login" class="col-sm-2 col-form-label">
            Add User
        </label>
        <div class="col-sm-10">
            <InputText id="login" @bind-Value="newUser.LoginName"></InputText>
        </div>
    </div>
    <div class="col-sm-10">
        <InputSelect id="role-select" @bind-Value="newUser.UserRole">
            @foreach(var role in selectList)
            {
                <option value="@role.Value" selected=@role.Selected>@role.Text</option>
            }
        </InputSelect>
    </div>

</EditForm>

@code {
    User newUser = new User();
    List<Role> rolesList = new List<Role>();
    List<SelectListItem> selectList = new List<SelectListItem>();


    protected override async Task OnInitializedAsync()
    {
        rolesList = new List<Role>()
        {
            new Role(){RoleName ="Admin", ID ="1"},
            new Role(){RoleName ="HR", ID ="2"},
            new Role(){RoleName ="Manager", ID ="3"},
            new Role(){RoleName ="User", ID ="4"}
        };
        foreach(Role role in rolesList)
        {
            if(rolesList.Count < 1)
            {
                selectList.Add(new SelectListItem()
                {
                    Text = role.RoleName,
                    Value = role.ID,
                    Selected = true
                });
            }
            else
            {
                selectList.Add(new SelectListItem()
                {
                    Text = role.RoleName,
                    Value = role.ID,
                    Selected = false
                });
            }
        }
    }

    public async void AddUserWithRole(EditContext editContext)
    {
        
    }

}
